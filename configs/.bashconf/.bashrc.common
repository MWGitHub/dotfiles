# MOTD
function echo_color() {
  local color="$1"
  printf "${color}$2\033[0m\n"
}
echo_color "\033[0;90m" "c-f  Move forward"
echo_color "\033[0;90m" "c-b  Move backward"
echo_color "\033[0;90m" "c-p  Move up"
echo_color "\033[0;90m" "c-n  Move down"
echo_color "\033[0;90m" "c-a  Jump to beginning of line"
echo_color "\033[0;90m" "c-e  Jump to end of line"
echo_color "\033[0;90m" "c-d  Delete forward"
echo_color "\033[0;90m" "c-h  Delete backward"
echo_color "\033[0;90m" "c-k  Delete forward to end of line"
echo_color "\033[0;90m" "c-u  Delete entire line"

export XDG_CONFIG_HOME="$HOME/.config"

# Colors
export LS_COLORS="ow=01;33"

# Platform checks
platform=$(uname)
if [ "$platform" == "Linux" ]; then
    keychain --lockwait 5 -Q "$HOME/.ssh/id_rsa"
    source "$HOME/.keychain/$HOSTNAME-sh"
fi

# SSH environment forwarding
SOCK="/tmp/ssh-agent-$USER-screen"
if test $SSH_AUTH_SOCK && [ $SSH_AUTH_SOCK != $SOCK ]
then
    rm -f /tmp/ssh-agent-$USER-screen
    ln -sf $SSH_AUTH_SOCK $SOCK
    export SSH_AUTH_SOCK=$SOCK
fi

# Common tools and scripts paths
export PATH="$HOME/tools:$HOME/scripts:$HOME/.local/bin:$PATH"
# Common project scripts paths that do not require installation
export PATH="$HOME/projects/scripts/bin:$PATH"
# Man pages
export MANPATH="$HOME/.local/share/man:$MANPATH"

# Python
export PATH="$HOME/.pyenv/bin:$PATH"
if [ "$platform" == "Linux" ]; then
  export PYTHON_CONFIGURE_OPTS="--enable-shared"
elif [ "$platform" == "Darwin" ]; then
  export PYTHON_CONFIGURE_OPTS="--enable-framework"
fi
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
eval "$(pipenv --completion)"

# Node
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

# Rust
export PATH="$HOME/.cargo/bin:$PATH"

# Ruby
export PATH="$HOME/.rbenv/shims:$PATH"
if [ -d "$HOME/.rbenv" ]; then
    source "$HOME/.rbenv/completions/rbenv.bash"
fi

# Start ssh server
if [ "$platform" != 'Darwin' ]; then
    if [ "$START_SSH" == "true" ]; then
        sshd_running=$(ps aux | grep -v grep | grep sshd)
        if [ -z "$sshd_running" ]; then
            echo "Starting ssh server..."
            sudo service ssh start
        fi
    fi
fi

# WSL Docker Host
wsl=$(uname -r | grep Microsoft$)
if [ -n "$wsl" ]; then
	export DOCKER_COMPOSE_VERSION=1.21.0
	export DOCKER_HOST=tcp://0.0.0.0:2375
fi

# Powerline
powerline-daemon -q
POWERLINE_BASH_CONTINUATION=1
POWERLINE_BASH_SELECT=1
export POWERLINE_PATH=$(find $HOME/.local/lib/*3.6/site-packages/powerline -maxdepth 0)
. "$POWERLINE_PATH/bindings/bash/powerline.sh"
export POWERLINE_BINDINGS="$POWERLINE_PATH/bindings/"

# Completions
# ~/.bashconf/.bash_completions

# Aliases
alias sc="cd ~/scripts"
alias to="cd ~/tools"
alias pj="cd ~/projects"
alias wk="cd ~/work"
alias ebc="vim ~/.bashconf/.bashrc.common"
alias ebl="vim ~/.bashconf/.bashrc.local"

alias eb="exec bash"
